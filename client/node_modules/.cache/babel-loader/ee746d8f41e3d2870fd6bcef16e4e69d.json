{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport { persistStore } from \"redux-persist\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"./root-reducer\";\nimport createSagaMiddleware from \"redux-saga\"; //we defined middleware as an array so that we can keep adding\n//middlewares which we want and the spread component\n//enables all the middleware present\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [sagaMiddleware]; //As we dont want our deployed website to have the logger, we do the below =>\n\nif (process.env.NODE_ENV === \"development\") {\n  middleware.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middleware)); // sagaMiddleware.run()\n\nexport const persistor = persistStore(store);","map":{"version":3,"sources":["C:/Users/Nishidha/Desktop/Webd/project_ecommerce/src/redux/store.js"],"names":["createStore","applyMiddleware","persistStore","logger","rootReducer","createSagaMiddleware","sagaMiddleware","middleware","process","env","NODE_ENV","push","store","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,oBAAP,MAAiC,YAAjC,C,CAEA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAGD,oBAAoB,EAA3C;AAEA,MAAME,UAAU,GAAG,CAACD,cAAD,CAAnB,C,CAEA;;AAEA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CH,EAAAA,UAAU,CAACI,IAAX,CAAgBR,MAAhB;AACD;;AAED,OAAO,MAAMS,KAAK,GAAGZ,WAAW,CAACI,WAAD,EAAcH,eAAe,CAAC,GAAGM,UAAJ,CAA7B,CAAzB,C,CAEP;;AAEA,OAAO,MAAMM,SAAS,GAAGX,YAAY,CAACU,KAAD,CAA9B","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\r\nimport { persistStore } from \"redux-persist\";\r\nimport logger from \"redux-logger\";\r\nimport rootReducer from \"./root-reducer\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\n//we defined middleware as an array so that we can keep adding\r\n//middlewares which we want and the spread component\r\n//enables all the middleware present\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middleware = [sagaMiddleware];\r\n\r\n//As we dont want our deployed website to have the logger, we do the below =>\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  middleware.push(logger);\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middleware));\r\n\r\n// sagaMiddleware.run()\r\n\r\nexport const persistor = persistStore(store);\r\n"]},"metadata":{},"sourceType":"module"}